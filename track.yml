slug: pki-backend
id: iuf6qudvdybh
type: track
title: PKI Backend
teaser: Learn how to use vault pki backend.
description: |-
  Learn how to use vault pki backend.

  Certificate renewal is one the challenging tasks that all DevOps engineers face. In this track we will demonstrate how vault pki backend can be used to automate certificate renewal.

  Vault agent is going to be used to demonstrate the process of automatically reloading a certificate.
icon: https://storage.googleapis.com/instruqt-frontend/assets/hashicorp/tracks/vault.png
tags:
- vault
- pki
owner: hashicorp
developers:
- ahmed@hashicorp.com
private: true
published: false
challenges:
- slug: vault-ca
  id: u2ntr10yjsjt
  type: challenge
  title: Vault CA
  teaser: Create full CA managed by Vault.
  assignment: |-
    * In this step, we are going to generate a self-signed root certificate using PKI secrets engine.<br>
      * Start a Vault dev server. The dev server is a built-in, pre-configured server that is not very secure but useful for playing with Vault locally.
      ```
      vault server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8200 &
      ```
      * Enable the pki secrets engine. Multiple PKI engines can be enabled by modifying the path
      ```
      vault secrets enable -path=pki pki
      ```
      * Tune the pki secrets engine to issue certificates with a maximum time-to-live (TTL) of 26280 hours 3 years.
      ```
      vault secrets tune -max-lease-ttl=26280h pki
      ```
      * Generate the root certificate and save the certificate in CA_cert.crt.
      ```
      vault write -field=certificate pki/root/generate/internal common_name="internal.com" \
        ttl=876h > configs/pki/CA_cert.crt
      ```
      This generates a new self-signed CA certificate and private key. Vault will automatically revoke the generated root at the end of its lease period (TTL); the CA certificate will sign its own Certificate Revocation List (CRL).
      * Configure the CA and CRL URLs.
      ```
      vault write pki/config/urls \
        issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" \
        crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"
      ```
    * Now, we are going to create an intermediate CA using the root CA we regenerated in the previous step.
      * First, enable the _pki_ secrets engine at the _pki_int_ path.
      ```
      vault secrets enable -path=pki_int pki
      ```
      * Tune the _pki_int_ secrets engine to issue certificates with a maximum time-to-live (TTL) of 8760 hours one year in this case.
      ```
      vault secrets tune -max-lease-ttl=8760 pki_int
      ```
      * Execute the following command to generate an intermediate and save the CSR as _pki_intermediate_.csr.
      ```
      vault write -format=json pki_int/intermediate/generate/internal \
        common_name="service.internal.com Intermediate Authority" \
        | jq -r '.data.csr' > pki_intermediate.csr
      ```
      * Sign the intermediate certificate with the root certificate and save the generated certificate as _intermediate.cert.pem_.
      ```
      vault write -format=json pki/root/sign-intermediate csr=@pki_intermediate.csr \
        format=pem_bundle ttl="8760h" \
        | jq -r '.data.certificate' > intermediate.cert.pem
      ```
      * Once the CSR is signed and the root CA returns a certificate, it can be imported back into Vault.
      ```
      vault write pki_int/intermediate/set-signed certificate=@intermediate.cert.pem
      ```
      * Create a role named example-dot-com which allows subdomains.
      ```
      vault write pki_int/roles/example-dot-com \
        allowed_domains="team1.service.internal.com" \
        allow_subdomains=true \
        max_ttl="730h"
      ```
  notes:
  - type: text
    contents: Vault's PKI secrets engine can dynamically generate X.509 certificates
      on demand. This allows services to acquire certificates without going through
      the usual manual process of generating a private key and Certificate Signing
      Request (CSR), submitting to a CA, and then waiting for the verification and
      signing process to complete.
  tabs:
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 3000
- slug: vault-agent
  id: xjwyfmtxxkco
  type: challenge
  title: Vault Agent
  teaser: Vault agent Configuration.
  assignment: |-
    * Configure vault agent policies
      * enable approle
      ```
      vault auth enable approle
      ```
      * create the privilege required for vault agent
      ```
      cat > configs/policies/token_update.hcl <<- "EOF"
      # Permits token creation
      path "auth/token/create" {
        capabilities = ["update"]
      }
      # Enable secrets engine
      path "sys/mounts/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }
      # List enabled secrets engine
      path "sys/mounts" {
        capabilities = ["read", "list"]
      }
      # Work with pki secrets engine
      path "pki*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
      }
      EOF
      vault policy write token_update configs/policies/token_update.hcl
      vault write auth/approle/role/apps policies="token_update"
      ```
    * Configure Vault agent
      * Get vault agent roleID and secretID
      ```
      vault read -format=json\
        auth/approle/role/apps/role-id \
        | jq  -r '.data.role_id'\
        > configs/vault_agent/roleID
      vault write -f -format=json\
        auth/approle/role/apps/secret-id \
        | jq -r '.data.secret_id'\
        > configs/vault_agent/secretID
      ```
      * Create the templates required to render the certificates
      ```
      cat > configs/vault_agent/templates/ca.ctmpl <<- "EOF"
      {{- /* templates/ca.ctmpl */ -}}
      {{ with secret "pki_int/issue/example-dot-com" "common_name=vault.team1.service.internal.com" "ttl=5m"}}
      {{ .Data.issuing_ca }}{{ end }}
      EOF
      cat > configs/vault_agent/templates/cert.ctmpl <<- "EOF"
      {{- /* templates/cert.ctmpl */ -}}
      {{ with secret "pki_int/issue/example-dot-com" "common_name=vault.team1.service.internal.com" "ttl=5m"}}
      {{ .Data.certificate }}{{ end }}
      EOF
      cat > configs/vault_agent/templates/key.ctmpl <<- "EOF"
      {{- /* templates/key.ctmpl */ -}}
      {{ with secret "pki_int/issue/example-dot-com" "common_name=vault.team1.service.internal.com" "ttl=5m"}}
      {{ .Data.private_key }}{{ end }}
      EOF
      ```
      * The vault-agent configuration can be accessed on the Vault Agent configuration tab. To start the vault agent run:
      ```
      vault agent -config=/root/configs/vault_agent/config.hcl -log-level=debug &
      ```
    * Configure nginx proxy
      * The configuration of the Ngnix proxy is on the tab Ngnix Configuration. To start the proxy run:
      ```
      docker run --rm --network=host \
        --name nginx-container \
        -v $PWD/configs/nginx:/etc/nginx \
        -d nginx
      ```
    * Verify that the certificate is automatically updated.
      ```
      openssl s_client -showcerts \
      -connect vault.team1.service.internal.com:443 \
      2>/dev/null \
      | openssl x509 -inform pem -noout -text
      ```
  notes:
  - type: text
    contents: Vault-agent can be used to automate certificate renewal. This allows
      operators to write simple templates to acquire certificates and run commands
      to reload them.
  tabs:
  - title: Shell
    type: terminal
    hostname: workstation
  - title: Vault Agent configuration
    type: code
    hostname: workstation
    path: /root/configs/vault_agent
  - title: Ngnix Configuration
    type: code
    hostname: workstation
    path: /root/configs/nginx
  - title: Vault UI
    type: service
    hostname: workstation
    port: 8200
  difficulty: basic
  timelimit: 3000
checksum: "10149723556579566793"
